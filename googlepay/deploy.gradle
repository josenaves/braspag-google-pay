apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply from: 'keystore.gradle'   // contains bintray api key

ext {
    // This configuration will result in:
    // implementation '<groupId>:<artifactId>:<libVersion>'
    groupId = 'br.com.braspag'
    artifactId = "braspag-google-pay"
    libVersion = libraryVersion
}

version = libVersion
group = groupId

bintray {
    // defined in keystore.gradle
    user = bintray_user
    key = bintray_key

    configurations = ['archives']
    publish = true   // Whether version should be auto published after an upload (default: false)
    override = true  // Whether to override version artifacts already published

    // Package configuration
    // The plugin will use the repo and name properties to check if the package already exists.
    // In that case, there's no need to configure the other package properties (userOrg, desc, etc)
    pkg  {
        repo = 'maven'      // bintray repo
        name = artifactId   // bintray package
        vcsUrl = 'https://github.com/BraspagDevelopers/braspag-google-pay.git'
        licenses = ['MIT']
        version {
            name = libVersion
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId groupId
            artifactId artifactId
            version libVersion
            name artifactId   // pom.project.name must be same as bintray.package.name
        }
    }
}

if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}